/// <reference types="node" />
import * as bcurl from "bcurl";
import EventEmitter from "node:events";
import { ClientOptions } from "./types";
export default class WalletClient extends bcurl.Client {
    wallets: Map<string, any>;
    constructor(options: ClientOptions);
    init(): void;
    dispatch(id: string, event: any, ...args: any): void;
    open(): Promise<void>;
    close(): Promise<void>;
    auth(): Promise<void>;
    execute(name: any, params: any): any;
    wallet(id: string, token: any): Wallet;
    all(token: any): any;
    none(): any;
    join(id: string, token: any): any;
    leave(id: string): any;
    rescan(height: number): any;
    resend(): any;
    backup(path: string): any;
    getWallets(): any;
    createWallet(id: string, options: any): any;
    getHistory(id: string, account: any): any;
    getCoins(id: string, account: any): any;
    getPending(id: string, account: any): any;
    getBalance(id: string, account: any): any;
    getLast(id: string, account: any, limit: any): any;
    getRange(id: string, account: any, options: any): any;
    getTX(id: string, hash: string): any;
    getBlocks(id: string): any;
    getBlock(id: string, height: string | number): any;
    getCoin(id: string, hash: string, index: any): any;
    zap(id: string, account: any, age: any): any;
    createTX(id: string, options: any): any;
    send(id: string, options: any): any;
    sign(id: string, options: any): any;
    getInfo(id: string): any;
    getAccounts(id: string): any;
    getMaster(id: string): any;
    getAccount(id: string, account: string): any;
    createAccount(id: string, name: string, options: any): any;
    createAddress(id: string, account: any): any;
    createChange(id: string, account: any): any;
    createNested(id: string, account: any): any;
    setPassphrase(id: string, passphrase: any, old: any): any;
    retoken(id: string, passphrase: any): any;
    importPrivate(id: string, account: any, privateKey: any, passphrase: any): any;
    importPublic(id: string, account: any, publicKey: any): any;
    importAddress(id: string, account: any, address: any): any;
    lockCoin(id: string, hash: string, index: any): any;
    unlockCoin(id: string, hash: string, index: any): any;
    getLocked(id: string): any;
    lock(id: string): any;
    unlock(id: string, passphrase: any, timeout: any): any;
    getKey(id: string, address: any): any;
    getWIF(id: string, address: any, passphrase: any): any;
    addSharedKey(id: string, account: any, accountKey: any): any;
    removeSharedKey(id: string, account: any, accountKey: any): any;
    resendWallet(id: string): any;
}
declare class Wallet extends EventEmitter {
    parent: WalletClient | Wallet;
    client: WalletClient;
    id: string;
    token: string | null;
    constructor(parent: WalletClient | Wallet, id: string, token: string | null);
    open(): Promise<void>;
    close(): Promise<void>;
    getHistory(account: any): any;
    getCoins(account: any): any;
    getPending(account: any): any;
    getBalance(account: any): any;
    getLast(account: any, limit: any): any;
    getRange(account: any, options: any): any;
    getTX(hash: any): any;
    getBlocks(): any;
    getBlock(height: any): any;
    getCoin(hash: any, index: any): any;
    zap(account: any, age: any): any;
    createTX(options: any): any;
    send(options: any): any;
    sign(options: any): any;
    getInfo(): any;
    getAccounts(): any;
    getMaster(): any;
    getAccount(account: any): any;
    createAccount(name: any, options: any): any;
    createAddress(account: any): any;
    createChange(account: any): any;
    createNested(account: any): any;
    setPassphrase(passphrase: any, old: any): any;
    retoken(passphrase: any): Promise<any>;
    importPrivate(account: any, privateKey: any, passphrase: any): any;
    importPublic(account: any, publicKey: any): any;
    importAddress(account: any, address: any): any;
    lockCoin(hash: any, index: any): any;
    unlockCoin(hash: any, index: any): any;
    getLocked(): any;
    lock(): any;
    unlock(passphrase: any, timeout: any): any;
    getKey(address: any): any;
    getWIF(address: any, passphrase: any): any;
    addSharedKey(account: any, accountKey: any): any;
    removeSharedKey(account: any, accountKey: any): any;
    resend(): any;
}
export {};
